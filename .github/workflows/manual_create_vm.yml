name: Create and Bootstrap Virtual Machine

on:
  workflow_dispatch:
    inputs:
      name:
        description: "Name of the Virutal Machine"
        required: true
      swarm:
        description: 'Should be added to Swarm?'
        required: true
        default: 'true'      

jobs:

  build:
    runs-on: ubuntu-latest
    name: Build VM
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:

        # to generate AZURE_CREDENTIALS github secret:
        # az ad sp create-for-rbac --name "GithubActionsServicePrincipal" --role contributor --scopes /subscriptions/5b05ad77-2db4-4691-a3af-6fd0ba4294a3 --sdk-auth
      - name: Login via Az module
        uses: azure/login@v1
        with:
          creds: ${{secrets.AZURE_CREDENTIALS}}

      - name: Create VM
        id: create_vm
        uses: azure/CLI@v1
        with:
          azcliversion: 2.25.0
          inlineScript: |
            VM_NAME="auto-vm-${{github.event.inputs.name}}"
            if [ "$(az vm list -d -o table --query "[?name=='$VM_NAME']")" = "" ];
            then
              echo "::set-output name=should_bootstrap::true"
              az vm create \
              --resource-group AzureVM \
              --name $VM_NAME \
              --vnet-name AzureVM-vnet \
              --subnet Azure_To_AEX \
              --admin-username azureuser \
              --assign-identity [system] \
              --location eastus \
              --ssh-key-value '${{ secrets.AEX_SSH_PUBLIC_KEY }}' \
              --tags deploymentgroup=$VM_NAME \
              --public-ip-address-dns-name "aexautodeploy${{github.event.inputs.name}}" \
              --image UbuntuLTS
              sleep 20
              PRINCIPAL_ID=$(az vm show -g AzureVM -n $VM_NAME --query "identity.principalId" -otsv)
              echo $PRINCIPAL_ID
              az role assignment create --assignee-object-id $PRINCIPAL_ID --role "Key Vault Secrets User" --resource-group "AzureVM"
            else
              echo "::set-output name=should_bootstrap::false"
              echo "VM Already Exists"
            fi

      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: true      

      - name: Bootstrap
        id: Bootstrap_VM
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        if: ${{ steps.create_vm.outputs.should_bootstrap }}
        with:
          host: "aexautodeploy${{github.event.inputs.name}}.eastus.cloudapp.azure.com"
          key: ${{ secrets.AEX_SSH_PRIVATE_KEY }}          
          user: 'azureuser'
          scp: |
            ./scripts => /home/azureuser/inventory.bootstrap
          last_ssh: |
            sudo chmod +x ./inventory.bootstrap/scripts/azurevmbootstrap.sh
            ./inventory.bootstrap/scripts/azurevmbootstrap.sh

      - name: Join Docker Swarm
        id: Docker
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest
        if: ${{ steps.create_vm.outputs.should_bootstrap }}
        with:          
          host: "aexautodeploy${{github.event.inputs.name}}.eastus.cloudapp.azure.com"
          key: ${{ secrets.AEX_SSH_PRIVATE_KEY }}          
          user: 'azureuser'
          last_ssh: |
            docker swarm join --token ${{ secrets.SWARM_JOIN_TOKEN }}
            export DOCKER_SWARM_HOST=$(docker info --format "{{ (index .Swarm.RemoteManagers 0).Addr }}")
            export DOCKER_SWARM_HOST=${DOCKER_SWARM_HOST/2377/2374}
            export NODE_ID=$(docker info -f '{{.Swarm.NodeID}}')
            docker -H $DOCKER_SWARM_HOST node update --label-add deploymenttag=${{github.event.inputs.name}} $NODE_ID

            echo "export DOCKER_SWARM_HOST=${DOCKER_SWARM_HOST}" > ./.bash_aliases
            echo "alias dockerh='docker -H $DOCKER_SWARM_HOST'" >> ./.bash_aliases

      # - uses: act10ns/slack@v1
      #   with:
      #     status: ${{ job.status }}
      #     steps: ${{ toJson(steps) }}
      #     channel: '#builds'
      #   if: always()